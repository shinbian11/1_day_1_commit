<<try~except 예외처리>>

try:
    에러가 발생할 가능성이 있는 코드
except 에러종류:
    에러가 발생했을 경우 처리할 코드


->물론 예외처리 대신 if else를 사용할수 있다.
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
ex)

text = '100%'
try:
    number = int(text)
except ValueError:
    print('{}는 숫자가 아니네요.'.format(text))
------------------------------------------------------------------------------------------------
ex2)

def safe_pop_print(list,index):
    try:
        print(list.pop(index))
    except IndexError:
        print('{} index의 값을 가져올수 없습니다.'.format(index))
        
safe_pop_print([1,2,3],5)
------------------------------------------------------------------------------------------------
ex3)

try:
    a = 3/0
except ZeroDivisionError:
    print("0으로 나눌수없다.")
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
<<예외(에러)의 이름을 모를땐...?>>

==> except 뒤에 아무런 이름도 안 적어주면 됨!


try:
    에러가 발생할 가능성이 있는 코드
except:
    에러가 발생했을 경우 처리할 코드
------------------------------------------------------------------------------------------------
<<어디에서 에러가 발생했는지 모를떈...?(에러의 내용,정보를 알고싶을땐?)>>

==> except 뒤에 Exception as ex: 라고 쓰면 됨! 
(물론 이때의 ex는 발생한 에러의 이름을 받아오는 '변수'이다.)


try:
    list = []
    print(list[0])
    
except Exception as ex:
    print('어떤 에러가 발생했나요?',ex)
  

출력결과 >> 어떤 에러가 발생했나요? list index out of range
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

<<raise>> 
=> 에러를 직접 일으키는 방법!>


(구조)


try:
    ...
    raise 에러종류   #에러를 발생시킬 위치
    ...
exception 에러종류:
    처리할 코드

------------------------------------------------------------------------------------------------
>>단점: 많이 사용하면 코드를 읽기 어려워진다..
------------------------------------------------------------------------------------------------
<주로 사용하는 경우>
1. 입력을 이상한것을 입력했을때
2. 중첩된 for문을 한번에 종료시킬때
3. 나머지 다양한 여러 경우~~~
------------------------------------------------------------------------------------------------
ex1) 입력을 이상한것을 입력했을때

def rsp(mine,yours):
    allowed = ['가위','바위','보']
    if mine not in allowed:
        raise ValueError     #가위,바위,보가 아닌 다른 것을 입력했을때 에러를 발생시킴!
    if yours not in allowed:
        raise ValueError    

try:       
    rsp('가위','바')  
except ValueError:
    print('잘못된 값인가?')
------------------------------------------------------------------------------------------------
ex2) 중첩된 for문을 한번에 종료시킬때

school = {'1반': [172,185,198,177,165,199], '2반': [165,177,167,180,191]}
try:
    for class_number,students in school.items():
        for student in students:
            if student > 190:
                print(class_number+ '에 190을 넘는 학생이 있습니다.')
                raise StopIteration   #예외발생시킴으로써 한번에 for문 두개를 탈출해 나온다

except StopIteration:
    print('정상종료..')
------------------------------------------------------------------------------------------------