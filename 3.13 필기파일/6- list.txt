
<<리스트>>

> c언어의 배열같은것! 차이점은... { }가 아니라 [ ] 로 리스트를 정의한다.
ex)

list1 = [0,1,2,3,4]
print(list1)
print(list1[0])


>리스트의 원소들을 수정할수도 있다!
>문자열을 리스트에 넣을땐 당연히 ' '해야된다.
ex)

list1 = ['가위','바위','보']
list1[0] = '바위'
print(list1)   =>['바위','바위','보'] 라고 출력됨!

>list[-1]에서 -1의 의미는 '뒤에서 첫번째'라는 뜻
>list[-3]에서 -3의 의미는 '뒤에서 세번째'라는 뜻

ex)

list = [1,2,3]
print(list[-3])   # 1이 출력됨! 뒤에서 세번째가 1이니까... 
	      # 이때는 0번째부터 시작하는게 아니라 1번째부터 시작한다.
===============================================================

<<리스트의 수정>>

1번째 방법)
 
list = [1,2,3,4,5,6]
print(list)

list.append(16) 	=> 주의 ) 여기서는 괄호를 쓴다! [ ] 아니다!
print(list) 

=>append를 사용하여 리스트 뒤에 16을 추가할수있다.

2번쨰 방법)

list = [1,2,3,4,5,6]
print(list)

list2 = list+[16]
print(list2)

=> list와 16이 들어있는 list가 합쳐져 결과적으로 16이 추가된것!


<<1번쨰와 2번째 방법의 차이점!!>>

1번째는 list에 16이라는 '값이 추가'된거고, 2번쨰는 두 list가 합쳐져서 list2라는 '새로운 리스트'가 만들어진것!
겉보기에는 결과물이 같지만 사실 좀 다르다!



<<리스트끼리의 덧셈 연산>>
list1 = [1,2,3]
list2 = [4,5,6]

list3 = list1+list2
print(list3)     => [1,2,3,4,5,6]이 출력!
===============================================================
<<리스트안의 원소에 내가 원하는 값이 들어있는 지 알수있는 방법>>
ex)

list = [1,2,3,4,5,6]
print(list)

n=14
ownership = n in list
print(ownership)

=> 'in'이라는 명령어를 통해 알수있다! n이 list에 없으면 false, 있으면 true를 반환! boolean값을 반환!

ex)

list = [1,2,3,4,5,6]
print(list)

n=3
if n in list:  
    print('{}은 list안에 있어!'.format(n))
else:
    print('{}은 list안에 없어ㅠㅜ'.format(n))
===============================================================

<<리스트 값을 삭제하는 법>>
1. 인덱스번호를 이용하여 삭제
=>del을 사용!
2. 특정값을 삭제
=>remove를 사용!

ex1)
list = [1,2,3,4,5,6]
print(list)

del(list[0])   =>0번째 인덱스의 값인 1이 삭제된다!
print(list)


ex2)
list = [1,2,3,4,5,6]
print(list)

list.remove(3)   => 3을 삭제!
print(list)

>만약 지우고자 하는 값이 여러개일땐, 다 지우는게 아니라 가장 맨 처음에 탐색되는 값 하나만 삭제됨!
===============================================================
